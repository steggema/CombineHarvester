#This file collects up to date instructions for running the 2016 13 TeV MSSM statistical results. For more detailed information on Combine Harvester please see the documentation at
http://cms-analysis.github.io/CombineHarvester/

1a) Setting up datacards: for model independent limits

MorphingMSSM2016 --output_folder="mssm_111016_unblinding" -m MH  --postfix="-mttot" --control_region=1 --manual_rebin=true --real_data=true --zmm_fit=true

This will setup a subdirectory for each channel-cat, as well as combined channel and full combination directories. Each directory contains a single combined card as generated by WriteCards.
Note that this uses the new RooMorphingPdf and includes bin-by-bin uncertainties which are merged with merging parameter 0.4. Optional extras are controlled by --auto_rebin for automatic rebinning, --manual_rebin to choose a rebinning manually. 


1b) Setting up datacards: for model dependent limits (asymptotic)

MorphingMSSM2016 --output_folder="mssm_111016_unblinding_mhmodp" --postfix="-mttot" --control_region=1 --manual_rebin=true --real_data=true --zmm_fit=true

If not using the argument -m MH, the code will setup datacards for all 3 Higgs bosons as required for model dependent limits

1c) Setting up datacards: for model dependent limits (MSSMvsSM)

MorphingMSSM2016 --output_folder="mssm_111016_unblinding_MSSMvsSM_mhmodp" --postfix="-mttot" --control_region=1 --manual_rebin=true --real_data=true --zmm_fit=true -h "signal_SM125"

1d) Setting up datacards: for model independent limits with SM H as background

MorphingMSSM2016 --output_folder="mssm_111016_unblinding_SMHbkg" -m MH  --postfix="-mttot" --control_region=1 --manual_rebin=true --real_data=true --zmm_fit=true -h "bkg_SM125"



2a) Setting up workspaces for model independent limits (and 2D ggH-bbH limits)

Workspaces can be setup using the combine tool text2workspace, but this is now implemented in combineTool.py for easy conversion of multiple datacards:

combineTool.py -M T2W -o "ws.root" -P HiggsAnalysis.CombinedLimit.PhysicsModel:multiSignalModel --PO '"map=^.*/ggH$:r_ggH[0,0,200]"' --PO '"map=^.*/bbH$:r_bbH[0,0,200]"' -i output/mssm_111016_unblinding/*

Note that for this to work you will need to have the change to text2workspace from this commit:
https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit/pull/336

This will apply the text2workspace step recursively, setting up for every subdirectory and hence every channel-cat scenario. Workspaces are created for each of the two signal cases. In each case, the other signal is profiled. There are many different options to combineTool, but this particular set will create a "combined card" named combined.txt.cmb in each subdir, and a workspace named ws.root

These workspaces can also be used for the ggH-bbH 2D limits.

2b) Setting up workspaces for model dependent limits (asymptotic and MSSMvsSM)

combineTool.py -M T2W -o "mhmodp.root" -P CombineHarvester.CombinePdfs.MSSM:MSSM --PO filePrefix=$PWD/shapes/Models/ --PO modelFiles=13TeV,mhmodp_mu200_13TeV.root,1 [--PO debugOutput="mhmodp_mu200_13TeV_debug.root" --PO makePlots ] -i output/mssm_111016_unblinding_mhmodp/*

This will perform the same recursive application of text2workspace, this time applying the mhmodp physics model.


3a) Running model independent limits (also with SM Higgs as BG)

This can be done directly with combine, but again combineTool makes life a lot easier for us by allowing successive calls (with different choices of job submission, and parallelisation of calculations):

combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M Asymptotic --rAbsAcc 0 --rRelAcc 0.0005 --boundlist input/mssm_boundaries.json  --setPhysicsModelParameters r_ggH=0,r_bbH=0 --redefineSignalPOIs r_ggH -d output/mssm_111016_unblinding/*/ws.root --there -n ".ggH"

combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M Asymptotic --rAbsAcc 0 --rRelAcc 0.0005 --boundlist input/mssm_boundaries.json  --setPhysicsModelParameters r_ggH=0,r_bbH=0 --redefineSignalPOIs r_bbH -d output/mssm_111016_unblinding/*/ws.root --there -n ".bbH"

This goes to each subdirectory of output/mssm_160916_freezing/ (--there) and performs the combine calculation for the masses listed on the workspace (either ggH or bbH workspace). The combine output files are stored in the directories alongside the datacards. Note the optin --parallel = X allows you to run the calculations interactively with X in parallel, and e.g.' --job-mode 'lxbatch' --task-name 'mssm_ggH' --sub-opts '-q 1nh' --merge=4 ' could be used to instead run on the lxbatch, merging 4 masspoints into 1 job and submitting to the 1 hour queue.

Once all calculations are complete, the results are collected into json files using:

combineTool.py -M CollectLimits output/mssm_160916_freezing/*/higgsCombine.ggH*.root --use-dirs -o "mssm_160916_freezing_ggH.json"

combineTool.py -M CollectLimits output/mssm_160916_freezing/*/higgsCombine.bbH*.root --use-dirs -o "mssm_160916_freezing_bbH.json"

This will place a json in the current directory, and append the string "mssm_160916_freezing_ggH" to them. One will be placed for every subdir, so every channel-cat, combination requested will be available then for plotting.

when producing the limit with the SM higgs as BG simly change the datacards/directories to run for accordingly.

3b) Running model dependent limits (asymptotic)

combineTool.py -M AsymptoticGrid ./scripts/mssm_asymptotic_grid.json -d output/mssm_310516_freezing_mhmodp/cmb/mhmodp.root  --job-mode 'interactive' --task-name 'mssm_mhmodp'

The asymptotic grid mode reads in an input json to define a set of mA-tanb points to scan and perform the limit calculation for. This time the calculation is done once per workspace, since the script has a nice feature which is that if you call it multiple times with the same workspace and asymptotic grid it will check which points have already completed successfully and only run those remaining. This makes it really easy to top up the grid for a finer scan for example. Once all points are complete, on the final call the script will create asymptotic_grid.root file containing the results.

3c) Running model dependent limits (MSSMvsSM hypothesis test)

combineTool.py -M HybridNewGrid ./scripts/mssm_hybrid_grid.json --cycles 2 -d output/mssm_310516_freezing_mhmodp/cmb/mhmodp.root  --job-mode 'crab3' --task-name 'mssm_mhmodp_hybridgrid' --crab-area 'May18_Combine'

The mssm_hybrid_grid.json file specifies ao the mA-tanb points to scan, for more info see CombineHarvester/docs/HybridNewGrid.md

Like in AsymptoticGrid mode, points can be added or more toys can be generated for points which haven't met the significance/number of toy requirements specified in mssm_hybrid_grid.json. To check the progress of points, copy the output files back over from dcache and run with --cycles 0, the output graphs can be added by adding the --output option. This will write out a file HybridNewGridMSSM.root

3d) Running ggH-bbH 2D limits

The 2D limits are run using combineTool to take advantage of the possibilty to run for multiple masses and submission.

combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M MultiDimFit --boundlist input/mssm_ggH_bbH_2D_boundaries.json --setPhysicsModelParameters r_ggH=0,r_bbH=0 --redefineSignalPOIs r_ggH,r_bbH -d output/mssm_111016_freezing/cmb/ws.root --there -n ".ggH-bbH" --points 500 --algo grid

This will create one job per masspoint with 500 each. For batch-submission one can also specify the option "--split-points N" where N will be the maximum number of points per subjob.

This workflow has also been tested on the grid (normal crab submission options). With --split-points 2000 jobs run for approximately 3.5 hours.

To get the point for the SM expectation one first needs to create a corresponding asimov dataset. This is done using combine and the setPhysicsModelParameters and saveToys options.

combineTool.py -m "125" -M MultiDimFit --boundlist input/mssm_ggH_bbH_2D_boundaries.json --setPhysicsModelParameters r_ggH=0,r_bbH=0 --redefineSignalPOI r_ggH,r_bbH -t -1 -d output/mssm_unblinding_111016_SMHbkg/cmb/ws.root --there -n ".2D.ToyDataset.SM1" --algo none --saveToys

The resulting asimov dataset can then be loaded in a second step and fitted using the POIs r_ggH and r_bbH. For this copy the toy file into the corresponding folder and run combine loading the toy from this file.

cp output/mssm_unblinding_111016_SMHbkg/cmb/higgsCombine.2D.ToyDataset.SM1.MultiDimFit.mH125.123456.root output/mssm_unblinding_111016/cmb/higgsCombine.2D.ToyDataset.SM1.MultiDimFit.mH125.123456.root

combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M MultiDimFit --boundlist input/mssm_ggH_bbH_2D_boundaries.json --setPhysicsModelParameters r_ggH=0,r_bbH=0 --redefineSignalPOI r_ggH,r_bbH -t -1 -d output/mssm_unblinding_111016/cmb/ws.root --there -n ".2D.SM1.bestfit" --algo none --toysFile higgsCombine.2D.ToyDataset.SM1.MultiDimFit.mH125.123456.root


Please note: the boundaries (i.e. the range in r_bbH and r_ggH that is scanned) are not yet optimized.

3e) Running model independent limits with signal injected (blue band)

For generating the toys first of all a snapshot with the bestfit values for the BG+SM higgs hypothesis needs to be generated 

combineTool.py -m 160 -M GenerateOnly --setPhysicsModelParameters r_ggH=0,r_bbH=0,r_SM=1 --freezeNuisances r_SM --redefineSignalPOI r_ggH,r_bbH -t -1 --toysFrequentist -d output/mssm_freezing_withSM/cmb/ws_SM_and_MSSM.root --there -n ".InitalFit" --saveWorkspace

Based on this snapshot (it is called clean) the toys can then be generated.

combineTool.py -m "160"  -M GenerateOnly --setPhysicsModelParameters r_ggH=0,r_bbH=0 --snapshot clean --freezeNuisances r_SM --rerefineSignalPOI r_ggH,r_bbH -t 50 -d output/mssm_freezing_withSM/cmb/higgsCombine.InitalFit.GenerateOnly.mH160.root --there -n ".Toys" -s 0 --saveToys

As these toys are later on fitted in one job each, it is recommended to generate multiple of these smaller toy files (as usual the option -s can be modified to generate multiple files based on different seeds in one go)

combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M Asymptotic --boundlist input/mssm_boundaries.json --freezeNuisances r_SM --redefineSignalPOI r_ggH -t 50 -d output/mssm_freezing_withSM/cmb/ws_SM_and_MSSM.root --there -n ".ggH.0" --task-name "ggH.0" --toysFile higgsCombine.Toys.GenerateOnly.mH160.0.root --run observed
combineTool.py -m "90,100,110,120,130,140,160,180,200,250,350,400,450,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2300,2600,2900,3200" -M Asymptotic --boundlist input/mssm_boundaries.json --freezeNuisances r_SM --redefineSignalPOI r_bbH -t 50 -d output/mssm_freezing_withSM/cmb/ws_SM_and_MSSM.root --there -n ".bbH.0" --task-name "bbH.0" --toysFile higgsCombine.Toys.GenerateOnly.mH160.0.root --run observed

Once all jobs are done the results can be collected into a single json file. For this the corresponding quantiles of the distribution of toys is evaluated.

combineTool.py -M CollectLimits output/mssm_freezing_withSM/cmb/higgsCombine.ggH.*.root output/mssm_freezing_310516/cmb/higgsCombine.ggH*.root --use-dirs -o "mssm_freezing_BlueBand_ggH.json"
combineTool.py -M CollectLimits output/mssm_freezing_withSM/cmb/higgsCombine.bbH.*.root output/mssm_freezing_310516/cmb/higgsCombine.bbH*.root --use-dirs -o "mssm_freezing_BlueBand_bbH.json"

4a) Plotting model independent limits

The usual Brazil band plots can be made using this script, for e.g. the mutau channel:

python scripts/plotMSSMLimits.py --logy --logx mssm_310516_freezing_ggH_mt.json --cms-sub="Preliminary" -o mssm_310516_freezing_mt

Or comparison plots can be made using the following script:

python scripts/MSSMlimitCompare.py --file=mssm_310516_freezing_ggH_mt.json,mssm_310516_freezing_ggH_et.json --labels="mutau,etau" --expected_only --outname="mssm_310516_freezing_mt_vs_et_ggH" --process="gg#phi" 

The options --absolute and --relative can be used to make ratio plots as well. Note that it is also possible to apply parton luminosity scale factors to any of the limits.

To get the color scheme for the treatment of the SM higgs as BG the option --higgs-bg is implemented

python scripts/plotMSSMLimits.py --logy --logx mssm_freezing_withSMBG_ggH_mt.json --cms-sub="Preliminary" -o mssm_310516_freezing_mt --higgs-bg

4b) Plotting model dependent limits

python ../CombineTools/scripts/plotLimitGrid.py HybridNewGridMSSM.root --scenario-label="m_{h}^{mod+} scenario"  --output="mssm_111016_unblinding_mhmodp_cmb" --title-right="12.9 fb^{-1} (13 TeV)" --cms-sub="Preliminary" --contours="exp-2,exp-1,exp0,exp+1,exp+2,obs" --model_file=$PWD/shapes/Models/mhmodp_mu200_13TeV.root 

The plotting takes the asymptotic_grid or HybridNewGridMSSM file as input, and performs interpolation to produce smooth contours of exclusion for a 2D mA-tanb plot. Note that this script contains many different optional settings for this interpolation. 

4d) Plotting ggH-bbH 2D limits

The plotting of the 2D limits takes as input the output from the previous combine calls. For each mass point $MASS you will need to run. The script also offers the --debug-output option to allow for saving the inital TGraph2 and contours to a root-file.

python scripts/plotMultiDimFit.py --title-right="12.9 fb^{-1} (13 TeV)" --cms-sub="Preliminary" --mass $MASS -o 2D_limit_mH${MASS} output/mssm_unblinding_111016/cmb/higgsCombine.ggH-bbH.MultiDimFit.mH${MASS}.root

For also plotting the expectation for the SM Higgs you need to additionally provide the TFile with the points for the SM Higgs (see 3d) with the --sm-exp option 

python scripts/plotMultiDimFit.py --title-right="12.9 fb^{-1} (13 TeV)" --cms-sub="Preliminary" --mass $MASS -o 2D_limit_mH${MASS} output/mssm_unblinding_111016/cmb/higgsCombine.ggH-bbH.MultiDimFit.mH${MASS}.root --sm-exp output/mssm_unblinding_111016/cmb/higgsCombine.2D.SM1.bestfit.MultiDimFiti.mH${MASS}.root

4e) plotting model independent limits with signal injected (blue band)

For plotting the blue band limits the same script as for the Brazil band plots is used

python scripts/plotMSSMLimits.py --logy --logx mssm_freezing_BlueBand_bbH_cmb.json --process "gg#phi" --title-right="2.3 fb^{-1} (13 TeV)" --cms-sub="Preliminary" -o mssm_freezing_BlueBand_bbH_cmb --higgs-injected

5) Prefit plots

Prefit plots can be made and either the model dependent (3 Higgs) or signal resonance signal can be added for a benchmark point. The usage:
 
PostFitShapesFromWorkspace -d output/mssm_160916_freezing/cmb/combined.txt.cmb -w output/mssm_160916_freezing/cmb/ws.root -o shapes_160916.root --print --freeze r_ggH=0.1,r_bbH=0.1,MH=700
To make the plots in the docs:
python scripts/makeMassPlotsPrefit.py

python scripts/postFitPlot.py --file=htt_mt_8_13TeV_shapes_080416.root --ratio --extra_pad=0.3 --custom_x_range --x_axis_max=999.9 --x_axis_min=0.0 --r_ggH=0.1 --r_bbH=0.1 --mPhi=700 --file_dir="htt_mt_8_13TeV"

First is a call to PostFitShapesFromWorkspace, which will generate the signal and background templates for the benchmark point of mPhi = 700 GeV and for cross-section values for the 2 signal processes of 0.1pb. The script will then make a stacked plot. The option --model_dep can be used with choices for --mA and --tanb to instead plot the 3 Higgs signal from a model dependent workspace. 

By default (essentially hardcoded until we pass preapproval) the data will be blinded above 200 GeV. Automated blinding, based on s/root b bigger than 0.5 in a given bin, is also implemented and can be enable. The option --auto_blind_check_only will simply report which bins the calculation would choose to blind, based on internally running PostFitShapesFromWorkspace for a few benchmark points, whilst keeping the manual blinding of 200 and above. The option --auto_blind will then actually apply the blinding based on the s/root b calculation. To be used with caution - please call the check_only mode first to check it appears sensible! To simply make an s/root b plot for a given benchmark signal, the option --soverb_plot can be used, which replaces the ratio with the s/root b plot for signal and doesnt plot ANY data.

6) Postfit plots

Postfit plots require a sensible choice of fit. You can choose either the model independent or model dependent workspace, and simply need to set the appropriate parameters to soemthign sensible, e.g: 

combineTool.py -M MaxLikelihoodFit --setPhysicsModelParameters MH=700,r_ggH=0.1,r_bbH=0.1 -d output/mssm_310516_freezing/cmb/ws.root --redefineSignalPOIs r_ggH --there -m 700 --boundlist input/mssm_boundaries.json --minimizerTolerance 0.01 --minimizerStrategy 1

The plotting code can then be used in postfit mode and passed the output of the maximum likelihood fit, to make post fit plots instead of prefit:

PostFitShapesFromWorkspace -d output/mssm_310516_freezing/cmb/combined.txt.cmb -w output/mssm_310516_freezing/cmb/ws.root -o shapes.root --print --freeze r_ggH=0.1,r_bbH=0.1,MH=700 --postfit --sampling -f output/mssm_310516_freezing/cmb/mlfit.Test.root:fit_s

**for the final plots in the docs:**

combineTool.py -M MaxLikelihoodFit --setPhysicsModelParameters mA=1000,tanb=50 -d output/mssm_310516_freezing_mhmodp/cmb/mhmodp.root --there --minimizerTolerance 0.01 --minimizerStrategy 1

PostFitShapesFromWorkspace -d output/mssm_310516_freezing/cmb/combined.txt.cmb -w output/mssm_310516_freezing_mhmodp/cmb/mhmodp.root -o shapes.root --print --freeze mA=1000,tanb=50,r=1,x=1 --postfit --sampling -f output/mssm_310516_freezing_mhmodp/cmb/mlfit.Test.root:fit_s

python scripts/makeMassPlots.py

8) creating datacards for pulls and GOF tests

MorphingMSSMRun2 --output_folder="mssm_071016_unblinding" -m MH  --postfix="-mttot" --control_region=1 --auto_rebin=true --real_data=true --zmm_fit=true

For creating the workspace from the datacards we use the default model. This allows easier handling for the b-only fit.

combineTool.py -M T2W -o "ws.root" -i output/mssm_071016_unblinding/*

8a) Running the GoF jobs

We look at the Goodness of Fit for three different algorithms. The saturated model (saturated), Anderson-Darling (AD) and Kolmogorow-Smirnow (KS).
For the AD and KS it is sufficient to run the fits for the combined cards as the test-statitic for the individual channels can be extracted from these results. For the saturated model it is necessary to run them independtly of each other.
The choice of the mass value as 160 is arbitrary and not of any relevance here as we look at background only fits,

ALGO=AD (or ALGO=KS, ALGO=saturated)
combineTool.py -M GoodnessOfFit --algorithm $ALGO -m 160 --there -d output/mssm_071016_unblinding/cmb/ws.root -n ".$ALGO.toys" --fixedSignalStrength=0 -t 500
combineTool.py -M GoodnessOfFit --algorithm $ALGO -m 160 --there -d output/mssm_071016_unblinding/cmb/ws.root -n ".$ALGO" --fixedSignalStrength=0

ALGO=saturated
combineTool.py -M GoodnessOfFit --algorithm $ALGO -m 160 --there -d output/mssm_071016_unblinding/*_13TeV/ws.root -n ".$ALGO.toys" --fixedSignalStrength=0 -t 500
combineTool.py -M GoodnessOfFit --algorithm $ALGO -m 160 --there -d output/mssm_071016_unblinding/*_13TeV/ws.root -n ".$ALGO" --fixedSignalStrength=0

The toys can also be split in multiple batches by adding e.g. -s 0:10:1 as option (setting the seed to be 0-10 in 11 jobs)

8b) Collecting GoF outputs

For the saturated model run for each category seperatly

combineTool.py -M CollectGoodnessOfFit --input output/mssm_071016_unblinding/htt_et_8_13TeV/higgsCombine.saturated.GoodnessOfFit.mH160.root output/mssm_071016_unblinding/htt_et_8_13TeV/higgsCombine.saturated.toys.GoodnessOfFit.mH160.*.root -o htt_et_8_13TeV_saturated.json

For the AD and KS run

ALGO=AD (or ALGO=KS)
combineTool.py -M CollectGoodnessOfFit --input output/mssm_071016_unblinding/cmb/higgsCombine.$ALGO.GoodnessOfFit.mH160.root output/mssm_071016_unblinding/cmb/higgsCombine.$ALGO.toys.GoodnessOfFit.mH160.*.root -o cmb_$ALGO.json

8c) Plotting the GoF results

For the saturated model you again need to run the plotting once per cateogry like

python ../CombineTools/scripts/plotGof.py --statistic saturated --mass 160.0 -o htt_et_9_13TeV-saturated htt_et_9_13TeV_saturated.json  --title-right="12.9 fb^{-1} (13 TeV)" --title-left="e#tau_{h}, btag"

For the AD or KS algorithm the plotting is done for all categories in one go (inclusing labelling of the plots)

ALGO=AD (or ALGO=KS)
python ../CombineTools/scripts/plotGof.py --statistic $ALGO --mass 160.0 cmb_$ALGO.json --title-right="12.9 fb^{-1} (13 TeV)" --output='-$ALGO'

8d) Getting the pulls

For determining the pulls in the b-only fit we run

combineTool.py -M MaxLikelihoodFit output/mssm_071016_unblinding/cmb/ws.root

Workaround for not unblinding fitted signal strength: can also set signal to only float within a very small range, e.g:

combine -M MaxLikelihoodFit --setPhysicsModelParameters r_ggH=0,r_bbH=0 --freezeNuisances r_bbH --redefineSignalPOIs r_ggH -m 700  --setPhysicsModelParameterRanges r_ggH=-0.000001,0.000001 --minimizerTolerance 0.01 --minimizerStrategy 0 -d output/mssm_071016_unblinding/cmb/ws.root

From this point on the pulls can then be extracted using the script diffNuisances.py which is provided together with combine.
python $CMSSW_BASE/src/HiggsAnalysis/CombinedLimit/test/diffNuisances.py -A -a --stol 0.99 --stol 0.99 --vtol 99. --vtol2 99. -f html mlfit.Test.root > mlfit.html
